# =============================================================================
# OCI ARM Development Instance - Zsh Configuration
# =============================================================================
# This file is managed by Ansible - do not edit manually


# Path to your oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Theme configuration
ZSH_THEME="agnoster"

# Plugins configuration
plugins=(
    git
    docker
    kubectl
    npm
    node
    python
    pip
    tmux
    zsh-autosuggestions
    zsh-syntax-highlighting
    colored-man-pages
    command-not-found
    copyfile
    copypath
    extract
    history
    sudo
    web-search
)

# Load Oh My Zsh
source $ZSH/oh-my-zsh.sh

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================

# User configuration
export PATH="$HOME/.local/bin:$PATH"

# Editor preferences
export EDITOR='vim'
export VISUAL='vim'

# Docker configuration
export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1

# Kubernetes configuration
export KUBECONFIG="$HOME/.kube/config"

# Node.js configuration
export NODE_OPTIONS="--max-old-space-size=4096"

# Development tools
export TERM=xterm-256color

# History configuration
HISTSIZE=10000
HISTFILESIZE=20000
SAVEHIST=10000
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt SHARE_HISTORY

# =============================================================================
# ALIASES
# =============================================================================

# Basic aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Docker aliases
alias d='docker'
alias dc='docker compose'
alias dps='docker ps'
alias dpsa='docker ps -a'
alias dimg='docker images'
alias dexec='docker exec -it'
alias dlogs='docker logs'
alias dstop='docker stop $(docker ps -q)'
alias drm='docker rm $(docker ps -aq)'
alias drmi='docker rmi $(docker images -q)'

# Git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'
alias gpl='git pull'

# Kubernetes aliases
alias k='kubectl'
alias kgp='kubectl get pods'
alias kgs='kubectl get services'
alias kgd='kubectl get deployments'
alias kgn='kubectl get nodes'
alias kga='kubectl get all'
alias kns='kubectl get namespaces'
alias kdp='kubectl describe pod'
alias kds='kubectl describe service'
alias kdd='kubectl describe deployment'
alias kaf='kubectl apply -f'
alias kdf='kubectl delete -f'
alias kl='kubectl logs'
alias kex='kubectl exec -it'

# Helm aliases
alias h='helm'
alias hls='helm list'
alias hi='helm install'
alias hu='helm upgrade'
alias hd='helm delete'
alias hs='helm search'

# Tailscale aliases
alias ts='tailscale'
alias tsstatus='tailscale status'
alias tsip='tailscale ip -4'

# System aliases
alias syslog='sudo journalctl -f'
alias diskspace='df -h'
alias meminfo='free -h'
alias cpuinfo='lscpu'
alias netstat='ss -tulnp'

# Tmux aliases
alias tm='tmux'
alias tma='tmux attach-session -t'
alias tmn='tmux new-session -s'
alias tml='tmux list-sessions'
alias tmk='tmux kill-session -t'

# =============================================================================
# FUNCTIONS
# =============================================================================

# Create directory and change to it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract various archive types
extract() {
    if [ -f "$1" ] ; then
        case $1 in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar e "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Docker helper functions
dclean() {
    echo "Cleaning up Docker..."
    docker system prune -af
    docker volume prune -f
}

dshell() {
    docker run --rm -it --entrypoint=/bin/bash "$1"
}

# Kubernetes helper functions
kctx() {
    kubectl config current-context
}

kns-switch() {
    kubectl config set-context --current --namespace="$1"
}

# Git helper functions
glog() {
    git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
}

# =============================================================================
# WELCOME MESSAGE
# =============================================================================

# Display system information on login (only in interactive shells)
if [[ $- == *i* && -z "$TMUX" ]]; then
    echo ""
    echo "🚀 Welcome to your OCI ARM Development Server!"
    echo "📍 Instance: $(hostname) | User: $(whoami)"
    echo "🛠️  Tools: Docker, Node.js $(node --version 2>/dev/null || echo 'N/A'), Python $(python3 --version 2>/dev/null | cut -d' ' -f2 || echo 'N/A'), VSCode, k3s"
    
    # Show cluster status if k3s is running
    if systemctl is-active --quiet k3s 2>/dev/null; then
        echo "☸️  Kubernetes: k3s cluster $(kubectl get nodes --no-headers 2>/dev/null | wc -l || echo '0') node(s) ready"
    fi
    
    # Show Tailscale status
    if command -v tailscale &> /dev/null && tailscale status &>/dev/null; then
        echo "🔗 Tailscale: Connected ($(tailscale ip -4 2>/dev/null || echo 'N/A'))"
    fi
    
    echo "📁 Directories: ~/projects, ~/workspace"
    echo "💻 Shell: Zsh with Oh My Zsh + Agnoster theme"
    echo "🖥️  Terminal: tmux available (run 'tmux' to start)"
    echo ""
fi

# =============================================================================
# COMPLETION AND INTEGRATIONS
# =============================================================================

# kubectl completion
if command -v kubectl &> /dev/null; then
    source <(kubectl completion zsh)
fi

# helm completion
if command -v helm &> /dev/null; then
    source <(helm completion zsh)
fi


# Load local customizations if they exist
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local