---
# =============================================================================
# OCI ARM Development Instance - Ansible Playbook
# =============================================================================
# This playbook configures the development environment after VM deployment
#
# Usage:
#   ansible-playbook -i inventory.yml playbook.yml
#   ansible-playbook -i inventory.yml playbook.yml --tags docker
#   ansible-playbook -i inventory.yml playbook.yml --tags kubernetes

- name: Configure OCI ARM Development Instance
  hosts: oci_instances
  become: yes
  vars:
    dev_user: "{{ ansible_user }}"
    nodejs_version: "lts"
    k3s_version: "latest"
    
  tasks:
    # ==========================================================================
    # SYSTEM UPDATES
    # ==========================================================================
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      tags: [system, base]

    - name: Upgrade system packages
      apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes
      tags: [system, base]

    - name: Install base development packages
      apt:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - tree
          - unzip
          - zsh
          - tmux
          - fonts-powerline
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - build-essential
          - python3-pip
          - python3-venv
          - python3-dev
        state: present
      tags: [system, base]

    # ==========================================================================
    # DOCKER INSTALLATION
    # ==========================================================================
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /usr/share/keyrings/docker-archive-keyring.gpg
        state: present
      tags: [docker]

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
      tags: [docker]

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
      tags: [docker]

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
      tags: [docker]

    - name: Add user to docker group
      user:
        name: "{{ dev_user }}"
        groups: docker
        append: yes
      tags: [docker]

    # ==========================================================================
    # NODE.JS INSTALLATION
    # ==========================================================================
    - name: Download Node.js setup script
      get_url:
        url: https://deb.nodesource.com/setup_lts.x
        dest: /tmp/nodesource_setup.sh
        mode: '0755'
      tags: [nodejs]

    - name: Run Node.js setup script
      shell: bash /tmp/nodesource_setup.sh
      args:
        creates: /etc/apt/sources.list.d/nodesource.list
      tags: [nodejs]

    - name: Install Node.js
      apt:
        name: nodejs
        state: present
        update_cache: yes
      tags: [nodejs]

    - name: Install global npm packages
      npm:
        name: "{{ item }}"
        global: yes
        state: present
      loop:
        - yarn
        - pm2
        - nodemon
      tags: [nodejs]

    # ==========================================================================
    # VSCODE INSTALLATION
    # ==========================================================================
    - name: Add Microsoft GPG key
      apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        keyring: /etc/apt/trusted.gpg.d/packages.microsoft.gpg
        state: present
      tags: [vscode]

    - name: Add VSCode repository
      apt_repository:
        repo: "deb [arch=arm64,armhf,amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main"
        state: present
        filename: vscode
      tags: [vscode]

    - name: Install VSCode
      apt:
        name: code
        state: present
        update_cache: yes
      tags: [vscode]

    # ==========================================================================
    # TAILSCALE INSTALLATION
    # ==========================================================================
    - name: Install Tailscale
      shell: curl -fsSL https://tailscale.com/install.sh | sh
      args:
        creates: /usr/bin/tailscale
      tags: [tailscale]

    - name: Start and enable Tailscale service
      systemd:
        name: tailscaled
        state: started
        enabled: yes
      tags: [tailscale]

    # Note: Tailscale auth will be handled manually or via separate task
    # with vault-stored auth key

    # ==========================================================================
    # KUBERNETES (k3s) INSTALLATION
    # ==========================================================================
    - name: Install k3s
      shell: |
        curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644
      args:
        creates: /usr/local/bin/k3s
      tags: [kubernetes, k3s]

    - name: Start and enable k3s service
      systemd:
        name: k3s
        state: started
        enabled: yes
      tags: [kubernetes, k3s]

    - name: Create .kube directory for user
      file:
        path: "/home/{{ dev_user }}/.kube"
        state: directory
        owner: "{{ dev_user }}"
        group: "{{ dev_user }}"
        mode: '0755'
      tags: [kubernetes, k3s]

    - name: Copy k3s kubeconfig to user directory
      shell: |
        cp /etc/rancher/k3s/k3s.yaml /home/{{ dev_user }}/.kube/config
        chown {{ dev_user }}:{{ dev_user }} /home/{{ dev_user }}/.kube/config
        chmod 600 /home/{{ dev_user }}/.kube/config
      args:
        creates: "/home/{{ dev_user }}/.kube/config"
      tags: [kubernetes, k3s]

    # ==========================================================================
    # KUBECTL INSTALLATION
    # ==========================================================================
    - name: Get latest kubectl version
      uri:
        url: https://dl.k8s.io/release/stable.txt
        return_content: yes
      register: kubectl_version
      tags: [kubernetes, kubectl]

    - name: Download kubectl binary
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version.content | trim }}/bin/linux/arm64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: '0755'
        owner: root
        group: root
      tags: [kubernetes, kubectl]

    # ==========================================================================
    # HELM INSTALLATION
    # ==========================================================================
    - name: Install Helm
      shell: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        creates: /usr/local/bin/helm
      tags: [kubernetes, helm]

    # ==========================================================================
    # USER ENVIRONMENT SETUP
    # ==========================================================================
    - name: Fix home directory ownership
      file:
        path: "/home/{{ dev_user }}"
        state: directory
        owner: "{{ dev_user }}"
        group: "{{ dev_user }}"
        mode: '0755'
        recurse: yes
      tags: [environment, permissions]

    - name: Create development directories
      file:
        path: "/home/{{ dev_user }}/{{ item }}"
        state: directory
        owner: "{{ dev_user }}"
        group: "{{ dev_user }}"
        mode: '0755'
      loop:
        - projects
        - workspace
        - .local/bin
      tags: [environment]


    - name: Create welcome message
      template:
        src: motd.j2
        dest: /etc/motd
        owner: root
        group: root
        mode: '0644'
      tags: [environment]

    # ==========================================================================
    # ZSH AND OH-MY-ZSH SETUP
    # ==========================================================================
    - name: Check if oh-my-zsh is already installed
      stat:
        path: "/home/{{ dev_user }}/.oh-my-zsh"
      register: ohmyzsh_installed
      tags: [zsh, shell]

    - name: Install oh-my-zsh
      shell: |
        curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh -s -- --unattended
      become_user: "{{ dev_user }}"
      when: not ohmyzsh_installed.stat.exists
      tags: [zsh, shell]

    - name: Install zsh-autosuggestions plugin
      git:
        repo: https://github.com/zsh-users/zsh-autosuggestions
        dest: "/home/{{ dev_user }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
        version: master
        force: yes
      become_user: "{{ dev_user }}"
      tags: [zsh, shell]

    - name: Install zsh-syntax-highlighting plugin
      git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: "/home/{{ dev_user }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
        version: master
        force: yes
      become_user: "{{ dev_user }}"
      tags: [zsh, shell]


    - name: Configure zshrc with development settings
      template:
        src: zshrc.j2
        dest: "/home/{{ dev_user }}/.zshrc"
        owner: "{{ dev_user }}"
        group: "{{ dev_user }}"
        mode: '0644'
      tags: [zsh, shell]

    - name: Change default shell to zsh for user
      user:
        name: "{{ dev_user }}"
        shell: /usr/bin/zsh
      tags: [zsh, shell]

    # ==========================================================================
    # TMUX CONFIGURATION
    # ==========================================================================
    - name: Create tmux configuration
      template:
        src: tmux.conf.j2
        dest: "/home/{{ dev_user }}/.tmux.conf"
        owner: "{{ dev_user }}"
        group: "{{ dev_user }}"
        mode: '0644'
      tags: [tmux, shell]

    - name: Install tmux plugin manager (TPM)
      git:
        repo: https://github.com/tmux-plugins/tpm
        dest: "/home/{{ dev_user }}/.tmux/plugins/tpm"
        version: master
        force: yes
      become_user: "{{ dev_user }}"
      tags: [tmux, shell]

    - name: Install tmux plugins via TPM
      shell: |
        export TMUX_PLUGIN_MANAGER_PATH="/home/{{ dev_user }}/.tmux/plugins"
        /home/{{ dev_user }}/.tmux/plugins/tpm/bin/install_plugins
      become_user: "{{ dev_user }}"
      args:
        creates: "/home/{{ dev_user }}/.tmux/plugins/tmux-sensible"
      tags: [tmux, shell]

    # ==========================================================================
    # FIREWALL CONFIGURATION (if needed)
    # ==========================================================================
    - name: Configure UFW for development
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - "22"      # SSH
        - "6443"    # k3s API server
        - "10250"   # kubelet
      tags: [firewall]
      when: configure_firewall | default(false)

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted

    - name: restart tailscaled
      systemd:
        name: tailscaled
        state: restarted

    - name: restart k3s
      systemd:
        name: k3s
        state: restarted